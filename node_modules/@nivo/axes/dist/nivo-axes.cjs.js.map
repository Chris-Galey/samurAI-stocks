{"version":3,"file":"nivo-axes.cjs.js","sources":["../src/compute.ts","../src/components/AxisTick.tsx","../src/components/Axis.tsx","../src/props.ts","../src/components/Axes.tsx","../src/components/GridLine.tsx","../src/components/GridLines.tsx","../src/components/Grid.tsx","../src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {`${value}`}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        (typeof ticks)[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo, SVGAttributes } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return (\n            <animated.line\n                {...animatedProps}\n                {...(theme.grid.line as SVGAttributes<SVGLineElement>)}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"names":["computeCartesianTicks","_ref","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","_ref$engine","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","d","_position","x","y","top","bottom","_position2","left","right","ticks","map","value","_extends","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","_ref2","width","height","_values","Array","isArray","undefined","lines","_position3","_position4","x1","x2","y1","y2","_position5","_position6","memoizedAxisTick","memo","_format","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","children","_jsx","jsx","dominantBaseline","textTransform","memoizedAxis","_ref$x","_ref$y","length","_ref$tickSize","_ref$tickPadding","_ref$tickRotation","_ref$renderTick","renderTick","AxisTick","legend","_ref$legendPosition","legendPosition","_ref$legendOffset","legendOffset","ariaHidden","formatValue","_computeCartesianTick","legendNode","legendX","legendY","legendRotation","_useMotionConfig","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","tick","initial","from","enter","update","leave","jsxs","transitionProps","_state","tickIndex","React","createElement","rotate","domain","axisPropTypes","PropTypes","oneOf","oneOfType","number","arrayOf","string","instanceOf","func","node","bool","axisPropType","shape","positions","Axes","xScale","yScale","axes","_Fragment","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_theme$axis$domain$li","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","_theme$axis$ticks$lin","degreesToRadians","fill","fillStyle","fillText","String","restore","_ref3"],"mappings":"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"}