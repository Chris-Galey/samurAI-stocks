{"version":3,"file":"nivo-axes.es.js","sources":["../src/compute.ts","../src/components/AxisTick.tsx","../src/components/Axis.tsx","../src/props.ts","../src/components/Axes.tsx","../src/components/GridLine.tsx","../src/components/GridLines.tsx","../src/components/Grid.tsx","../src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {`${value}`}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        (typeof ticks)[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo, SVGAttributes } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return (\n            <animated.line\n                {...animatedProps}\n                {...(theme.grid.line as SVGAttributes<SVGLineElement>)}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"names":["computeCartesianTicks","_ref","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","_ref$engine","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","d","_position","x","y","top","bottom","_position2","left","right","ticks","map","value","_extends","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","_ref2","width","height","_values","Array","isArray","undefined","lines","_position3","_position4","x1","x2","y1","y2","_position5","_position6","memoizedAxisTick","memo","_format","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","children","_jsx","dominantBaseline","textTransform","memoizedAxis","_ref$x","_ref$y","length","_ref$tickSize","_ref$tickPadding","_ref$tickRotation","_ref$renderTick","renderTick","AxisTick","legend","_ref$legendPosition","legendPosition","_ref$legendOffset","legendOffset","ariaHidden","formatValue","_computeCartesianTick","legendNode","legendX","legendY","legendRotation","_useMotionConfig","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","createElement","rotate","domain","axisPropTypes","PropTypes","oneOf","oneOfType","number","arrayOf","string","instanceOf","func","node","bool","axisPropType","shape","positions","Axes","xScale","yScale","axes","_Fragment","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_theme$axis$domain$li","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","_theme$axis$ticks$lin","degreesToRadians","fill","fillStyle","fillText","String","restore","renderAxesToCanvas","renderGridLinesToCanvas","_ref3"],"mappings":"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"}