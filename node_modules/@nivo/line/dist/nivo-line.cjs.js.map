{"version":3,"file":"nivo-line.cjs.js","sources":["../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js","../src/ResponsiveLine.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove && onMouseMove(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(slice, event)\n        },\n        [hideTooltip, slice, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            data-testid={`slice-${slice.id}`}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n"],"names":["LinePointTooltip","_ref","point","_jsx","BasicTooltip","id","_jsxs","jsxs","children","jsx","data","xFormatted","yFormatted","enableChip","color","serieColor","propTypes","PropTypes","object","isRequired","memo","SliceTooltip","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","oneOf","commonPropTypes","arrayOf","shape","oneOfType","string","number","x","instanceOf","Date","y","xScale","xFormat","func","yScale","yFormat","layers","curve","lineCurvePropType","axisTop","axisPropType","axisRight","axisBottom","axisLeft","enableGridX","bool","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","any","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","LegendPropShape","isInteractive","debugMesh","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","_extends","role","useMesh","motionPropTypes","defsPropTypes","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","scheme","PointTooltip","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","curveFromProp","useAreaGenerator","_ref2","area","y1","y0","useSlices","_ref4","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","_ref5","i","slices","x0","slicePoints","prevSlice","nextSlice","reverse","_ref6","sliceHeight","useLine","_ref7","_ref7$xScale","xScaleSpec","_ref7$yScale","yScaleSpec","_ref7$colors","_ref7$curve","_ref7$areaBaselineVal","_ref7$pointColor","_ref7$pointBorderColo","_ref7$enableSlices","enableSlicesTooltip","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","_useState","useState","hiddenIds","setHiddenIds","_useMemo","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","_useMemo2","dataWithColor","label","datum","find","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","concat","_ref3","reduce","acc","position","index","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","_useMotionConfig","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","strokeOpacity","Slices","current","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","Mesh","margin","showTooltipAt","left","top","BaseMesh","nodes","Line","props","partialMargin","pointLabelYOffset","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useLine","currentPoint","setCurrentPoint","_useState2","currentSlice","setCurrentSlice","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Crosshair","SvgWrapper","layer","Fragment","defaultProps","withContainer","LineCanvas","canvasRef","canvasEl","useRef","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","LineCanvas$1","forwardRef","ResponsiveWrapper"],"mappings":"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"}