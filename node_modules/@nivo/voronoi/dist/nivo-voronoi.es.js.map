{"version":3,"file":"nivo-voronoi.es.js","sources":["../src/props.ts","../src/computeMesh.ts","../src/hooks.ts","../src/Voronoi.tsx","../src/ResponsiveVoronoi.tsx","../src/Mesh.tsx","../src/meshCanvas.ts"],"sourcesContent":["import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n","import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { useRef, useState, useCallback, useMemo, MouseEvent } from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: MouseEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromEvent = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [elementRef, delaunay]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onClick]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n","import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n"],"names":["defaultVoronoiProps","xDomain","yDomain","layers","enableLinks","linkLineWidth","linkLineColor","enableCells","cellLineWidth","cellLineColor","enablePoints","pointSize","pointColor","role","getAccessor","directive","datum","computeMeshPoints","_ref","points","_ref$x","x","_ref$y","y","getX","getY","map","point","computeMesh","_ref2","width","height","debug","delaunay","Delaunay","from","voronoi","undefined","useVoronoiMesh","points2d","useMemo","useVoronoi","data","xScale","scaleLinear","domain","range","yScale","d","p","useVoronoiLayerContext","_ref3","InnerVoronoi","partialMargin","margin","_ref$layers","_ref$xDomain","_ref$yDomain","_ref$enableLinks","_ref$linkLineWidth","_ref$linkLineColor","_ref$enableCells","_ref$cellLineWidth","_ref$cellLineColor","_ref$enablePoints","_ref$pointSize","_ref$pointColor","_ref$role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useVoronoi","layerById","links","cells","bounds","includes","_jsx","stroke","strokeWidth","fill","render","renderPoints","renderBounds","layerContext","SvgWrapper","children","layer","i","Fragment","createElement","Voronoi","theme","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","isInteractive","animate","_extends","ResponsiveVoronoi","props","ResponsiveWrapper","Mesh","nodes","onMouseEnter","onMouseMove","onMouseLeave","onClick","elementRef","useRef","_useState","useState","currentIndex","setCurrentIndex","_useVoronoiMesh","voronoiPath","getIndexAndNodeFromEvent","useCallback","event","current","_getRelativeCursor","getRelativeCursor","index","find","handleMouseEnter","_getIndexAndNodeFromE","node","handleMouseMove","_getIndexAndNodeFromE2","handleMouseLeave","previousNode","handleClick","_getIndexAndNodeFromE3","_jsxs","ref","_Fragment","opacity","renderCell","style","cursor","renderVoronoiToCanvas","ctx","save","globalAlpha","beginPath","strokeStyle","lineWidth","restore","renderVoronoiCellToCanvas","fillStyle"],"mappings":"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"}